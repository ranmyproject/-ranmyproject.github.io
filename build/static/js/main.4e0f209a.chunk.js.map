{"version":3,"sources":["services/snackbar-message.js","components/shared/url-constants.js","services/authentication.js","services/api-service.js","components/login.js","components/shared/header.js","components/user/dashboard.js","components/user/submission-list.js","components/user/home.js","components/register.js","App.js","serviceWorker.js","index.js"],"names":["variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","loading","LoopIcon","useStyles1","makeStyles","theme","backgroundColor","palette","dark","primary","main","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","SnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","SnackbarContent","clsx","aria-describedby","id","action","IconButton","key","aria-label","color","onClick","SnackbarMessage","React","useState","open","setOpen","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","data","window","sessionStorage","setItem","JSON","stringify","parse","getItem","this","getUserData","newUser","mobile","url","fetch","method","mode","cache","credentials","headers","authentication","getUserId","getToken","redirect","referrerPolicy","body","response","json","Login","handleCloseSnackbar","setState","snackbarProps","console","log","state","logginUser","otp","password","loginUser","apiService","postData","USER_BASE_URL","user","then","setUserData","setTimeout","location","href","loggedIn","catch","value","prevState","otpLogin","document","title","res","googleresponse","name","profileObj","givenName","familyName","email","token","accessToken","Image","imageUrl","ProviderId","responseGoogle","signupOrLoginIn","Fragment","class","onSubmit","e","preventDefault","clientId","buttonText","onSuccess","onFailure","onChange","target","type","placeholder","required","Component","Header","src","height","alt","data-toggle","data-target","pathname","clear","Authentication","isAuthenticated","Dashboard","getCardObj","status","status_enum","text","count","createObject","post_count","isNormalUser","push","isAdmin","card_list","loadData","getData","POST_BASE_URL","isSuperAdmin","redirectToPost","filter","handleShow","modeShow","handleChangePostText","newPost","submitPankti","submission","err","user_type","showSubmissions","filterValue","panktiyaan_list","from","to","total","filtered_panktiyaan_list","map","item","index","Modal","show","onHide","animation","closeButton","Title","Body","for","disabled","rows","Footer","Button","SubmissionList","submit","options","buttons","label","takeAction","postId","willUnmount","confirmAlert","stage","list","i","length","post","selectedPost","category","postPankti","pList","handleCategoryChange","selectedOptions","o","showRangeList","direction","slice","availableFilter","URLSearchParams","search","get","split","some","r","includes","toUpperCase","posts","filtered_list","bind","multiple","override","css","Home","size","role","Register","verifyPassword","registerUser","confirm_password","alert","instaHandle","values","queryString","App","path","render","component","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e0f209a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport { amber } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n    loading: LoopIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n    success: {\n        backgroundColor: \"#1bb873\",\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    loading: {\n        backgroundColor: \"#2779C0\",\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction SnackbarContentWrapper(props) {\n    const classes = useStyles1();\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"snackbar\"\n            message={\n                <span id=\"snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning','loading']).isRequired,\n};\n\nexport default function SnackbarMessage(props) {\n\n    const [open, setOpen] = React.useState(props.open);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpen(false);\n        props.onClose();\n    };\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n            }}\n            open={open}\n            autoHideDuration={props.variant===\"loading\"?5000:3000}\n            onClose={handleClose}\n        >\n            <SnackbarContentWrapper\n                onClose={handleClose}\n                variant={props.variant}\n                message={props.message}\n            />\n        </Snackbar>\n    );\n}\n","// export const BASE_URL = \"http://3.23.160.50:8000\";\nexport const BASE_URL = \"http://192.168.0.104:8000\";\n\nexport const USER_BASE_URL = BASE_URL+\"/api/user/\";\nexport const POST_BASE_URL = BASE_URL+\"/api/post/\";\nexport const ADMIN_BASE_URL = BASE_URL+\"/api/admin/\";\n\nexport const USER_REGISTRATION = USER_BASE_URL+\"registration\";\nexport const LOGIN_URL = USER_BASE_URL+\"loginOrSingup\";\nexport const VERIFY_OTP_PASSWORD = USER_BASE_URL+\"verifyOtpPassword\";\nexport const POST_PANKTIYAAN = POST_BASE_URL+\"add\";\nexport const GET_PANKTIYAAN = POST_BASE_URL+\"get\";\nexport const USER_POST_COUNT = POST_BASE_URL+\"getUserPostCount\";\n\nexport const SUPER_ADMIN_POST_COUNT = POST_BASE_URL+\"getSuperAdminPostCount\";\n\nexport const USER_POST = POST_BASE_URL+\"getUserPost\";\n\nexport const GET_SUPER_ADMIN_POST = POST_BASE_URL+\"getSuperAdminPost\";\n\nexport const GET_APPROVED_POST = POST_BASE_URL+\"getApprovedPost\";\n\nexport const ADMIN_GET_POST = POST_BASE_URL+\"getAdminPost\";\nexport const ADMIN_GET_POST_COUNT = POST_BASE_URL+\"getAdminPostCount\";\nexport const ADMIN_POST_ACTION = POST_BASE_URL+\"updateStage\";\n\nexport const UPDATE_POST_DETAIL = POST_BASE_URL+\"updatePostDetail\";\n\nexport const HOME_POST_API = POST_BASE_URL+\"home\";\n\n\nexport const VERIFY_GOOGLE_AUTH = USER_BASE_URL+\"verifyGoogleAuth\";","\nclass Authentication {\n\n    setUserData(data){\n        window.sessionStorage.setItem(\"user\",JSON.stringify(data));\n    }\n    \n    getUserData(){\n        return JSON.parse(window.sessionStorage.getItem(\"user\"));\n    }\n\n    getUserName(){\n        return this.getUserData() === null ? \"\": this.getUserData()[\"name\"];\n    }\n\n    mobileNumberProcessed(newUser,mobile){\n        window.sessionStorage.setItem(\"newUser\",newUser);\n        window.sessionStorage.setItem(\"mobile\",mobile);\n        window.sessionStorage.setItem(\"mobileNumberProcessed\",true);\n    }\n\n    getMobileNumber(){\n        return window.sessionStorage.getItem(\"mobile\");\n    }\n\n    isAuthenticated(){\n        return window.sessionStorage.getItem(\"user\")!==null;\n    }\n\n    getUserId(){\n        if(this.getUserData()===null){\n            // sessionStorage.clear();\n            // window.location.href=\"/login\";\n            // return;\n        }\n        return this.getUserData() === null ? null: this.getUserData()[\"userId\"];\n    }\n\n\n    isNormalUser(){\n        return this.getUserData()[\"type\"]===\"NORMAL\";\n    }\n\n    isAdmin(){\n        return this.getUserData()[\"type\"]===\"ADMIN\";\n    }\n\n    isSuperAdmin(){\n        return this.getUserData()[\"type\"]===\"SUPERADMIN\";\n    }\n\n    getToken(){\n        if(this.getUserData()===null){\n            // sessionStorage.clear();\n            // window.location.href=\"/login\";\n            // return;\n        }\n        return this.getUserData() === null ? \"\": this.getUserData()[\"token\"];    \n    }\n}\n\nexport default new Authentication();","import authentication from '../services/authentication';\n\nclass ApiService{\n    async postData(url, data) {\n        const response = await fetch(url, {\n          method: 'POST', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Content-Type': 'application/json',\n            \"userId\":authentication.getUserId()===null?-1:authentication.getUserId(),\n            \"Authorization\":authentication.getToken()\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n          body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n      }\n      \n      async getData(url) {\n        const response = await fetch(url, {\n          method: 'GET', // *GET, POST, PUT, DELETE, etc.\n          mode: 'cors', // no-cors, *cors, same-origin\n          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n          credentials: 'same-origin', // include, *same-origin, omit\n          headers: {\n            'Content-Type': 'application/json',\n            \"userId\":authentication.getUserId(),\n            \"Authorization\":authentication.getToken()\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          redirect: 'follow', // manual, *follow, error\n          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        });\n        return response.json(); // parses JSON response into native JavaScript objects\n      }\n}\n\nexport default new ApiService();","import React, {Component} from 'react'\nimport SnackbarMessage from '../services/snackbar-message';\nimport * as urlConstant from './shared/url-constants';\nimport authentication from '../services/authentication';\nimport apiService from '../services/api-service';\nimport GoogleLogin from 'react-google-login';\n\nclass Login extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state = {\n          user:{\n              mobile:\"\",\n              password:\"\",\n              otp:\"\",\n              otpLogin:false\n          },\n          snackbarProps: { open: false, message: \"Hello World\", variant: \"success\" }\n        }\n    }\n\n    componentDidMount(){\n        document.title = 'Panktiyaan | Login';\n    }\n\n    handleCloseSnackbar = () =>{\n        this.setState({snackbarProps:{open: false,message: \"\", variant: \"success\"}});\n        console.log(this.state);\n    }\n\n    logginUser=(otp,password)=>{\n        \n    }\n\n    signupOrLoginIn(res) {\n        const googleresponse = {\n            name: res.profileObj.givenName+\" \"+res.profileObj.familyName,\n            email: res.profileObj.email,\n            token: res.accessToken,\n            Image: res.profileObj.imageUrl,\n            ProviderId: 'Google'\n        };\n\n        apiService.postData(urlConstant.VERIFY_GOOGLE_AUTH,{token:googleresponse.token}).then(data=>{\n            if(data[\"success\"]){\n                if(data[\"data\"][\"newUser\"]){\n                    window.location.href = '/register?name='+googleresponse.name+'&email='+googleresponse.email+'&token='+googleresponse.token;\n                }else{\n                    authentication.setUserData(data.data);\n                    this.setState({snackbarProps:{open: true,message: \"User logged in successfully\", variant: \"success\"}});\n                    setTimeout(()=>{\n                        window.location.href=\"/dashboard\";\n                    },1000);\n                }\n            }\n        }).catch(error=>{\n            this.setState({snackbarProps:{open: true,message: \"error while processing request\", variant: \"error\"}});\n        });\n    };\n\n    loginUser = () =>{\n        this.setState({snackbarProps:{open: true,message: \"processing login request\", variant: \"loading\"}});\n        apiService.postData(urlConstant.VERIFY_OTP_PASSWORD,this.state.user).then(data=>{\n            if(!data.success){\n                this.setState({loggedIn:false});\n                this.setState({snackbarProps:{open: true,message: data[\"error\"][\"message\"], variant: \"error\"}});\n            }else{\n                authentication.setUserData(data.data);\n                this.setState({snackbarProps:{open: true,message: \"User logged in successfully\", variant: \"success\"}});\n                setTimeout(()=>{\n                    window.location.href=\"/dashboard\";\n                },1000);\n            }\n        }).catch((error)=>{\n            console.log(error);\n            this.setState({snackbarProps:{open: true,message: \"error while processing request\", variant: \"error\"}});\n        });  \n    }\n\n    setUserData=(key,value)=>{\n        this.setState(prevState=>({user:{...prevState.user,[key]:value}}));\n    }\n\n    render(){\n\n        const responseGoogle = (response) => {\n          this.signupOrLoginIn(response);\n        }\n\n        return(\n            <React.Fragment>\n                {this.state.snackbarProps.open && <SnackbarMessage onClose={this.handleCloseSnackbar} {...this.state.snackbarProps}></SnackbarMessage>}\n                <div class=\"signup-form row\">\n                    <form onSubmit={(e) => {this.loginUser(); e.preventDefault();}} method=\"post\" class=\"col-md-5 col-11 m-auto\">\n                        <h3>Login</h3>\n                        <div className=\"mx-auto table-display\" >\n                            <GoogleLogin\n                                clientId=\"1087467545086-57aarlb1j1do6g1kdkfvr29casjnsboh.apps.googleusercontent.com\"\n                                buttonText=\"Login with Google\"\n                                onSuccess={responseGoogle}\n                                onFailure={responseGoogle} ></GoogleLogin>\n                        </div>    \n                        <hr/>                \n                        <h5 className=\"header text-center\">Login(Using Password)</h5>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"mobile\",e.target.value)} type=\"mobile\" class=\"form-control\" name=\"mobile\" placeholder=\"Mobile number\" required=\"required\"/>\n                        </div>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"password\",e.target.value)} type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required=\"required\"/>\n                        </div>\n\n                        {/* <div class=\"form-group ml-auto text-center\"><span class=\"badge badge-pill badge-info text-white\">OR</span></div>\n\n                        <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control\" name=\"otp\" placeholder=\"Otp number\"/>\n                            <div class=\"input-group-append\">\n                                <button class=\"btn btn-outline-secondary\" type=\"button\">Send OTP</button>\n                            </div>\n                        </div> */}\n\n                        <div class=\"form-group\">\n                            <button type=\"submit\" class=\"btn btn-success btn-lg btn-block\">Login</button>\n                        </div>\n                        {/* <div class=\"text-center\">New User? <a href=\"/register\">Register here</a></div> */}\n                    </form>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Login;\n","import React from 'react'\nimport \"../../services/sessions\";\nimport Authentication from '../../services/authentication';\n\nexport default function Header(){\n\n    function logOut(event){\n        event.preventDefault();\n        window.location.href=\"/login\"; \n        sessionStorage.clear();\n    }\n\n    return(\n        <nav className=\"navbar navbar-expand-md navbar-light bg-light\">\n            <a href=\"/\" className=\"navbar-brand\">\n                <img src=\"/images/logo.png\" height=\"28\" alt=\"CoolBrand\"/>\n            </a>\n            <button id=\"navDropdown\" type=\"button\" className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n        \n            <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <div className=\"navbar-nav\">\n                    <a href=\"/\" className={window.location.pathname===\"/\"?\"active nav-item nav-link\":\"nav-item nav-link\"}>Home</a>\n                    <a href=\"/dashboard\" className={window.location.pathname===\"/dashboard\"?\"active nav-item nav-link\":\"nav-item nav-link\"}>Dashboard</a>\n                </div>\n                <div className=\"navbar-nav ml-auto\">\n                    <a href=\"/\" onClick={logOut} className=\"nav-item nav-link\">{Authentication.isAuthenticated()?'Logout':'Login'}</a>\n                </div>\n            </div>\n        </nav>\n    )\n}","import React, {Component} from 'react'\nimport apiService from '../../services/api-service';\nimport * as urlConstant from '../shared/url-constants';\nimport authentication from '../../services/authentication';\nimport SnackbarMessage from '../../services/snackbar-message';\nimport { Button ,Modal} from 'react-bootstrap';\n\nconst list_length=10;\n\nclass Dashboard extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            name:\"\",\n            user_type:\"\",\n            showSubmissions:false,\n            filterValue:\"ALL\",\n            panktiyaan_list:[],\n            post_count:{},\n            from:0,\n            to:list_length,\n            total:0,\n            filtered_panktiyaan_list:[],\n            snackbarProps: { open: false, message: \"Hello World\", variant: \"success\" },\n            newPost:\"\",\n            modeShow:false,\n            card_list:[]\n        }\n    }\n\n    componentDidMount(){\n        document.title = 'Panktiyaan | Dashboard';\n        this.setState({name:authentication.getUserData()[\"name\"],user_type:authentication.getUserData()[\"type\"]});\n        this.loadData();\n    }\n\n    getCardObj=(status,status_enum,text,count)=>{\n        return {\n            status:status,\n            status_enum:status_enum,\n            text:text,\n            count:count,\n        }\n    }\n\n    createObject=(post_count)=>{\n        let data = [];\n        if(authentication.isNormalUser()){\n            data.push(this.getCardObj(\"Submissions\",\"ALL\",\"Submitted posts count by user\",post_count[\"submission\"]));\n            data.push(this.getCardObj(\"Approved\",\"APPROVED,POSTED\",\"Approved posts count by Panktiyaan team\",post_count[\"approved\"]));\n        }else if(authentication.isAdmin()){\n            data.push(this.getCardObj(\"Pending\",\"PENDING\",\"Pending post count available for action\",post_count[\"submission\"]));\n            data.push(this.getCardObj(\"Approved\",\"APPROVED\",\"Approved posts count by Panktiyaan team\",post_count[\"approved\"]));\n        }else{\n            data.push(this.getCardObj(\"Submissions\",\"APPROVED\",\"Submitted posts count by user\",post_count[\"approved\"]));\n            data.push(this.getCardObj(\"Posted\",\"POSTED\",\"Posts count published on homepage\",post_count[\"posted\"]));\n        }\n        this.setState({card_list:data});\n    }\n\n\n    loadData=()=>{\n        console.log('data loading');\n        apiService.getData(authentication.isAdmin()?urlConstant.ADMIN_GET_POST_COUNT:(authentication.isSuperAdmin()?urlConstant.SUPER_ADMIN_POST_COUNT:urlConstant.USER_POST_COUNT)).then(data=>{\n            this.setState({post_count:data.data});\n            this.createObject(data.data);\n        });\n    }\n\n    redirectToPost=(count,filter)=>{\n        if(count===0){\n            this.setState({snackbarProps:{open: true,message: \"No post found for this status\", variant: \"info\"}});\n            return;\n        }\n        window.location.href=\"/post?filter=\"+filter;\n    }\n\n    handleShow=()=>{\n        this.setState({modeShow:true});\n    }\n\n    handleClose=()=>{\n        this.setState({modeShow:false});\n    }\n\n    handleCloseSnackbar = () =>{\n        this.setState({snackbarProps:{open: false,message: \"\", variant: \"success\"}});\n    }\n\n    handleChangePostText=(event)=>{\n        let value = event.target.value;\n        this.setState({newPost:value});\n    }\n\n    submitPankti=()=>{\n        this.setState({snackbarProps:{open: true,message: \"processing post submission request\", variant: \"loading\"}});\n        apiService.postData(urlConstant.POST_PANKTIYAAN,{text:this.state.newPost}).then(data=>{\n            if(data[\"success\"]){\n                this.setState({snackbarProps:{open: true,message: \"post updated successfully\", variant: \"success\"}});\n                let count = this.state.post_count[\"submission\"]+1;\n                this.setState(prevState=>({post_count:{...prevState.post_count,submission:count}}));\n                this.createObject(this.state.post_count);\n            }else{\n                this.setState({snackbarProps:{open: true,message: data[\"error\"][\"message\"], variant: \"error\"}});\n            }\n            this.handleClose();\n        }).catch((err)=>{\n            console.log(err);\n        });\n    }\n    \n    render(){\n            return(\n                <React.Fragment>\n                    {this.state.snackbarProps.open && <SnackbarMessage onClose={this.handleCloseSnackbar} {...this.state.snackbarProps}></SnackbarMessage>}\n                    <div className=\"col-md-5 mx-auto\">\n                        <div className=\"mt-2 alert alert-success mt-2\">\n                            <div className=\"text-center\">Welcome <b>{this.state.name}</b></div>\n                        </div>\n                        {this.state.user_type === \"NORMAL\" &&\n                            <div className=\"dashboard_info alert-info alert mt-2\">\n                                <div className=\"text-center\">\n                                    <p>{this.state.post_count[\"pending\"]!==0?\"Your latest submission is in pending state.\\n Please wait for new submission\":(this.state.post_count[\"submission\"]!==0?\"Your last submission is approved\":\"Create your first submission\")}</p>\n                                    {this.state.post_count[\"pending\"]===0 &&<button className=\"btn btn-success\" onClick={this.handleShow}>Create New Submission</button>}\n                                </div>\n                            </div>\n                        }  \n    \n                        <div id=\"post-count\" className=\"row col-11 mx-auto justify-content-center\">\n                            {this.state.card_list.map((item, index) => (\n                                <div className=\"card col-md-5 m-2\" onClick={()=>this.redirectToPost(item.count,item.status_enum)}>\n                                    <div className=\"card-body\">\n                                        <h5 className=\"card-title text-center\">{item.count}</h5>\n                                        <h6 className=\"card-subtitle mb-2 text-muted\">{item.status}</h6>\n                                        <p className=\"card-text\">{item.text}</p>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </div>\n                    <Modal show={this.state.modeShow} onHide={this.handleClose} animation={false}>\n                        <Modal.Header closeButton>\n                        <Modal.Title>Modal heading</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <form>\n                                <div className=\"form-group\">\n                                    <label for=\"recipient-name\" className=\"col-form-label\">User:</label>\n                                    <input disabled type=\"text\" className=\"form-control\" id=\"recipient-name\" value={this.state.name}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label for=\"message-text\" className=\"col-form-label\">Message:</label>\n                                    <textarea onChange={(event)=>this.handleChangePostText(event)} className=\"form-control\" id=\"message-text\" rows=\"5\">{this.state.newPost}</textarea>\n                                </div>\n                            </form>\n                        </Modal.Body>\n                        <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.submitPankti}>\n                            Submit\n                        </Button>\n                        </Modal.Footer>\n                    </Modal>\n                </React.Fragment>\n            )\n        // let dashboard_condition = (!this.props.submission && !this.props.submission_list && !this.state.showSubmissions);\n        // return(\n        //     <React.Fragment>\n        //         <div id={dashboard_condition?\"dashboard\":\"\"} className=\"container\">\n        //             {this.state.snackbarProps.open && <SnackbarMessage onClose={this.handleCloseSnackbar} {...this.state.snackbarProps}></SnackbarMessage>}\n        //             {this.props.submission ? \n        //                 <Submission add_post_message={this.addPostMessage}></Submission>:\n        //                 this.state.showSubmissions || this.props.submission_list ? \n        //                     <SubmissionList submit_post={this.submitPost} action_submission={this.actionSubmission} total={this.state.total} from={this.state.from} to={this.state.to} show_range_list={this.showRangeList} filter_value={this.state.filterValue} update_list={this.updatePanktiyaanList} panktiyaan_list={this.state.filtered_panktiyaan_list}/>:                        \n        //                     authentication.isAdmin()?\n        //                     <React.Fragment>\n        //                         <div className=\"top-block\">\n        //                             <div className=\"user-heading\">\n        //                                 <p>{authentication.getUserName()}</p>\n        //                             </div>\n        //                         </div>\n        //                         <div className=\"middle-blocks\">\n        //                             <div onClick={this.showSubmissions} className=\"block-1\">\n        //                                 <div className=\"entry-count\">{this.state.post_count.submission}</div>\n        //                                 <div className=\"submissions\">Assigned</div>\n        //                             </div>\n        //                             <div onClick={this.showSubmissions} className=\"block-2\">\n        //                                 <div className=\"entry-count\">{this.state.post_count.pending}</div>\n        //                                 <div className=\"submissions\">Pending</div>\n        //                             </div>\n        //                         </div>          \n        //                     </React.Fragment>:\n        //                     (\n        //                         authentication.isSuperAdmin()?\n        //                         <React.Fragment>\n        //                             <div className=\"top-block\">\n        //                                 <div className=\"user-heading\">\n        //                                     <p>{authentication.getUserName()}</p>\n        //                                 </div>\n        //                             </div>\n        //                             <div className=\"middle-blocks\">\n        //                                 <div onClick={this.showSubmissions} className=\"block-1\">\n        //                                     <div className=\"entry-count\">{this.state.post_count.approved}</div>\n        //                                     <div className=\"submissions\">Approved</div>\n        //                                 </div>\n        //                                 <div onClick={this.showSubmissions} className=\"block-2\">\n        //                                     <div className=\"entry-count\">{this.state.post_count.posted}</div>\n        //                                     <div className=\"submissions\">Posted</div>\n        //                                 </div>\n        //                             </div>          \n        //                         </React.Fragment>:\n        //                         <React.Fragment>\n        //                             <div className=\"top-block\">\n        //                                 <div className=\"user-heading\">\n        //                                     <p>{authentication.getUserName()}</p>\n        //                                 </div>\n        //                             </div>\n        //                             <div className=\"middle-blocks\">\n        //                                 <div onClick={this.showSubmissions} className=\"block-1\">\n        //                                     <div className=\"entry-count\">{this.state.post_count.submission}</div>\n        //                                     <div className=\"submissions\">Submissions</div>\n        //                                 </div>\n        //                                 <div onClick={this.showSubmissions} className=\"block-2\">\n        //                                     <div className=\"entry-count\">{this.state.post_count.approved}</div>\n        //                                     <div className=\"submissions\">Approved</div>\n        //                                 </div>\n        //                             </div>          \n        //                             <div className=\"block-3\">\n        //                                 <div className=\"submission-status\">\n        //                                     Your latest submission is : <span className=\"status-color\">{this.state.post_count.pending===0 ? \"Approved\":\"Pending\"}</span>\n        //                                 </div>    \n        //                             </div>\n\n        //                             {this.state.post_count.pending===0 ?\n        //                                 <div className=\"block-4-submitted\">\n        //                                     <input onClick={this.openSubmissions} className=\"submission-block\" name=\"submit\" type=\"submit\" value=\"Make another submission\"/>\n        //                                 </div>:\n        //                                 <div className=\"block-4\">\n        //                                     <div className=\"submission-status\">\n        //                                         <span className=\"orange-color\">Sorry you cannot make another submission now</span> \n        //                                     </div>\n        //                                 </div>\n        //                             }  \n        //                         </React.Fragment>\n        //                     )\n        //             }\n        //         </div>\n        //         {(this.props.submission || (this.state.showSubmissions || this.props.submission_list)) &&\n        //             <div className=\"back-to-dashboard\">\n        //                 <a onClick={this.backToDashboard}>\n        //                     Back to Dashboard\n        //                 </a>\n        //             </div>\n        //         }\n        //     </React.Fragment>\n        // )\n    }\n}\n\nexport default Dashboard;\n","import React,  {Component}  from 'react'\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\nimport authentication from '../../services/authentication';\nimport { Button ,Modal} from 'react-bootstrap';\nimport apiService from '../../services/api-service';\nimport * as urlConstant from '../shared/url-constants';\nimport SnackbarMessage from '../../services/snackbar-message';\n\nconst list_length=4;\nclass SubmissionList extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            modeShow:false,\n            availableFilter:[\"APPROVED\",\"PENDING\",\"REJECTED\",\"POSTED\",\"ALL\"],\n            selectedPost:{},\n            panktiyaan_list:[],\n            filtered_panktiyaan_list:[],\n            category:[],\n            from:0,\n            total:0,\n            to:list_length,\n            snackbarProps: { open: false, message: \"Hello World\", variant: \"success\" },\n        }\n    }\n\n    submit=(data)=>{\n        const options = {\n            title: 'Are you sure?',\n            message: <p>You want to <b>{data.action}</b> this pankti submitted by <b>{data.item.name}</b>?</p>,\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => this.takeAction(data.action,data.item.postId)\n                },\n                {\n                    label: 'No',\n                }\n            ],\n            willUnmount: () => {}\n        }\n        confirmAlert(options);\n    };\n\n    takeAction=(action,item)=>{\n        apiService.postData(urlConstant.ADMIN_POST_ACTION,{postId:item,stage:action}).then(data=>{\n            if(data[\"success\"]){\n                this.setState({snackbarProps:{open: true,message: \"Post \"+action+\" successfully\", variant: \"success\"}});\n                let list = this.state.panktiyaan_list;\n                for(let i=0;i<list.length;i++){\n                    if(list[i].postId===item){\n                        list[i].stage=action;\n                    }\n                }\n                this.setState({panktiyaan_list:list});\n            }else{\n                this.setState({snackbarProps:{open: true,message: data[\"data\"][\"message\"], variant: \"error\"}});\n            }\n        }).catch((err)=>{\n            this.setState({snackbarProps:{open: true,message: \"error occured while processing request\", variant: \"error\"}});\n        });\n    }\n\n    componentDidMount(){\n        document.title = 'Panktiyaan | Post';\n        let filter = new URLSearchParams(window.location.search).get(\"filter\").split(\",\");\n\n        if(!this.state.availableFilter.some(r=> filter.includes(r.toUpperCase()))){\n            window.location.href=\"/dashboard\";\n            return;\n        }\n\n        apiService.getData(authentication.isAdmin()?urlConstant.ADMIN_GET_POST:(authentication.isSuperAdmin()?urlConstant.GET_SUPER_ADMIN_POST:urlConstant.USER_POST)).then(data=>{\n            if(data.success){\n                let panktiyaan_list = data.data.posts;\n                let filtered_list = filter==\"ALL\"?panktiyaan_list:panktiyaan_list.filter(item=>filter.includes(item.stage.toUpperCase()));\n                this.setState({panktiyaan_list:filtered_list,filtered_panktiyaan_list:filtered_list.slice(this.state.from,this.state.to),total:filtered_list.length});\n            }else{\n\n            }\n        });\n    }\n\n    handleShow=(post)=>{\n        this.setState({selectedPost:post,category:post.category});\n        this.setState({modeShow:true});\n    }\n\n    handleClose=()=>{\n        this.setState({modeShow:false});\n    }\n\n    postPankti=()=>{\n        var selectedPost = {...this.state.selectedPost}\n        selectedPost.category = this.state.category;\n\n        this.setState({snackbarProps:{open: true,message: \"processing post submission request\", variant: \"loading\"}});\n        apiService.postData(urlConstant.UPDATE_POST_DETAIL,selectedPost).then(data=>{\n            if(data[\"success\"]){\n                this.setState({snackbarProps:{open: true,message: \"post updated successfully\", variant: \"success\"}});\n                let pList = this.state.panktiyaan_list;\n                for(let i=0;i<pList.length;i++){\n                    if(pList[i][\"postId\"]===selectedPost[\"postId\"]){\n                        pList[i] = selectedPost;\n                    }\n                }\n                this.setState({panktiyaan_list:pList});\n            }else{\n                this.setState({snackbarProps:{open: true,message: data[\"data\"][\"message\"], variant: \"error\"}});\n            }\n        }).catch((err)=>{\n            console.log(err);\n        });\n\n        this.setState({modeShow:false});\n    }\n\n    handleChangePostText=(event)=>{\n        let value = event.target.value;\n        this.setState(prevState => ({\n            selectedPost:{\n              ...prevState.selectedPost,\n              text: value\n            }\n        }));\n    }\n\n    handleCategoryChange = (event) =>{\n        this.setState({category: [...event.target.selectedOptions].map(o => o.value)}); \n    }\n\n    showRangeList=(direction)=>{\n        let from = direction===\"prev\" ? this.state.from-list_length:this.state.to;\n        let to = direction===\"prev\" ? this.state.from:this.state.to+list_length;\n        let data = this.state.panktiyaan_list;\n        this.setState({filtered_panktiyaan_list:data.slice(from,to),from:from,to:(to>this.state.total?this.state.total:to)});\n    }\n\n    handleCloseSnackbar = () =>{\n        this.setState({snackbarProps:{open: false,message: \"\", variant: \"success\"}});\n    }\n    \n    render(){\n        return(\n            <React.Fragment>\n                {this.state.snackbarProps.open && <SnackbarMessage onClose={this.handleCloseSnackbar} {...this.state.snackbarProps}></SnackbarMessage>}\n                <div id=\"submission_list\">\n                    {this.state.filtered_panktiyaan_list.map((item, index) => (\n                         <div className=\"card col-md-5 col-11 m-auto-horizontal\">\n                         <div className=\"card-body\">\n                             <div className=\"card-title\">\n                                 <h5>{item.name}</h5>\n\n                                {(authentication.isAdmin() || authentication.isSuperAdmin()) &&\n                                    <div className=\"d-flex justify-content-end\">\n                                        <button className=\"btn btn-sm btn-success mx-1\" onClick={this.submit.bind(this,({item:item,action:\"APPROVED\"}))}>Approve</button>\n                                        <button className=\"btn btn-sm btn-danger mx-1\" onClick={this.submit.bind(this,({item:item,action:\"REJECTED\"}))}>Reject</button>\n                                        {authentication.isSuperAdmin() && <button className=\"btn btn-sm btn-info mx-1\" onClick={this.handleShow.bind(this,item)}>Edit</button>}\n                                    </div>\n                                }\n                             </div>\n                             <h6 className=\"card-subtitle mb-2 text-muted\">Status : {item.stage}</h6>\n                             <p className=\"card-text\">\n                                 {item.text}\n                             </p>\n                         </div>\n                     </div>)\n                    )}\n                    <div className=\"mx-auto col-md-5 d-flex justify-content-center\">\n                        {this.state.from > 0 && <button className=\"btn btn-primary mx-1\" onClick={this.showRangeList.bind(this,\"prev\")}>Previous</button>}\n                        {this.state.to < this.state.total && <button className=\"btn btn-primary mx-1\" onClick={this.showRangeList.bind(this,\"next\")}>Next</button>}\n                    </div>\n                </div>\n\n                {this.state.selectedPost &&\n                    <Modal show={this.state.modeShow} onHide={this.handleClose} animation={false}>\n                        <Modal.Header closeButton>\n                        <Modal.Title>Modal heading</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <form>\n                                <div className=\"form-group\">\n                                    <label for=\"recipient-name\" className=\"col-form-label\">User:</label>\n                                    <input disabled type=\"text\" className=\"form-control\" id=\"recipient-name\" value={this.state.selectedPost.name}/>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label for=\"message-text\" className=\"col-form-label\">Message:</label>\n                                    <textarea onChange={(event)=>this.handleChangePostText(event)} className=\"form-control\" id=\"message-text\" rows=\"5\">{this.state.selectedPost.text}</textarea>\n                                </div>\n                                <div className=\"input-group mb-3\">\n                                    <div className=\"input-group-prepend\">\n                                        <label className=\"input-group-text\" for=\"inputGroupSelect01\">Options</label>\n                                    </div>\n                                    <select onChange={(event)=>this.handleCategoryChange(event)} className=\"custom-select\" value={this.state.category} multiple>\n                                        <option value=\"HINDI\">HINDI</option>\n                                        <option value=\"SPORT\">SPORT</option>\n                                        <option value=\"TECH\">TECH</option>\n                                        <option value=\"GAME\">GAME</option>\n                                    </select>\n                                </div>\n                            </form>\n                        </Modal.Body>\n                        <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" onClick={this.postPankti}>\n                            Post\n                        </Button>\n                        </Modal.Footer>\n                    </Modal>\n                }\n            </React.Fragment>\n\n\n            // <React.Fragment>\n            //     {editPost ?\n            //         <EditPost submit_post={props.submit_post} post={editPost}/>:\n            //         <div className=\"neumorphism\">\n            //             <div className=\"status-list\">\n            //                 <select onChange={props.update_list.bind(this)}  value={props.filter_value} className=\"selection-box\" name=\"options\">\n            //                     <option value=\"ALL\">All</option>\n            //                     <option id=\"bg\" value=\"PENDING\">Pending</option>\n            //                     <option id=\"bg\" value=\"APPROVED\">Approved</option>\n            //                 </select>\n            //             </div>\n                        \n            //             {props.panktiyaan_list.map((item, index) => (\n            //                 <React.Fragment>\n            //                     {(authentication.isAdmin() || authentication.isSuperAdmin()) &&\n            //                         <div className=\"heading\">\n            //                             <div className=\"user-heading\">\n            //                                 <p>\n            //                                     @<a className=\"link-remove\" href=\"#\">{item.name}</a>\n            //                                 </p>\n            //                                 <p className={item.stage===\"APPROVED\"?\"green-text\":(item.stage===\"REJECTED\"?\"red-text\":\"grey-text\")}>{item.stage}</p>\n            //                             </div>\n            //                             <div className=\"user-heading admin-action\">\n            //                                 {authentication.isAdmin() && \n            //                                     <React.Fragment>\n            //                                         <button className=\"button success\" onClick={submit.bind(this,({item:item,action:\"APPROVED\"}))}>Approve</button>\n            //                                         <button className=\"button danger\" onClick={submit.bind(this,({item:item,action:\"REJECTED\"}))}>Reject</button>\n            //                                     </React.Fragment>\n            //                                 }\n            //                                 {authentication.isSuperAdmin() && \n            //                                     <button className=\"button grey\" onClick={setEditPost.bind(this,item)}>Edit</button>\n            //                                 }\n            //                             </div>\n            //                         </div>\n            //                     }\n            //                     {editPost===index ? \n            //                         <textarea name=\"entry\" id=\"entry-text\" required>{item.text}</textarea>:\n            //                         <div key={index} className=\"content\">\n            //                             <div className=\"text text-wrap\">\n            //                                 {item.text}\n            //                             </div>\n            //                         </div>\n            //                     }\n            //                 </React.Fragment>\n            //             ))}\n            //             <div className=\"end-buttons\">\n            //                 {\n            //                     props.from > 0 && \n            //                     <div className=\"previous-button\">\n            //                         <button className=\"button\" onClick={props.show_range_list.bind(this,\"prev\")} >Previous</button>\n            //                     </div>\n            //                 }\n            //                 {\n            //                     props.to<props.total &&\n            //                     <div className=\"next-button\">\n            //                         <button className=\"button\" onClick={props.show_range_list.bind(this,\"next\")}>Next</button>\n            //                     </div>\n            //                 }\n                        \n            //             </div>    \n            //         </div>\n            //     }\n            // </React.Fragment>\n        )\n    }\n}\n\nexport default SubmissionList;","import React, {Component} from 'react'\nimport * as urlConstant from '../shared/url-constants';\nimport apiService from '../../services/api-service';\nimport { css } from \"@emotion/core\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nconst list_length=10;\nclass Home extends Component{\n\n    constructor(props){\n        super(props)\n        this.state={\n            panktiyaan_list:[],\n            filtered_panktiyaan_list:[],\n            from:0,\n            total:0,\n            to:list_length,\n            loading: true,\n        }\n    }\n\n    componentDidMount(){\n        document.title = 'Panktiyaan | Home';\n        this.loadData();\n    }\n\n    showRangeList=(direction)=>{\n        let from = direction===\"prev\" ? this.state.from-list_length:this.state.to;\n        let to = direction===\"prev\" ? this.state.from:this.state.to+list_length;\n        let data = this.state.panktiyaan_list;\n        this.setState({filtered_panktiyaan_list:data.slice(from,to),from:from,to:(to>this.state.total?this.state.total:to)});\n    }\n\n    loadData=()=>{\n        apiService.getData(urlConstant.HOME_POST_API).then(data=>{\n            let panktiyaan_list = data.data.posts;\n            this.setState({loading:false, panktiyaan_list:panktiyaan_list,filtered_panktiyaan_list:panktiyaan_list.slice(this.state.from,this.state.to),total:panktiyaan_list.length});\n        });\n    }\n\n    render(){\n        return(\n            <div id=\"submission_list\">\n                {this.state.loading &&\n                    <div className=\"sweet-loading mt-5\">\n                        <BounceLoader\n                            css={override}\n                            size={50}\n                            color={\"#123abc\"}\n                            loading={this.state.loading}\n                        />\n                    </div>\n                }\n                {(!this.state.loading && this.state.filtered_panktiyaan_list.length===0) &&\n                    <div class=\"alert alert-info col-4 mx-auto mt-2\" role=\"alert\">\n                         No post approved yet\n                    </div>\n                }\n                {this.state.filtered_panktiyaan_list.map((item, index) => (\n                        <div class=\"card col-md-5 col-11 m-auto-horizontal\">\n                            <div class=\"card-body\">\n                                <div class=\"card-title\">\n                                    <h5>@ {item.name}</h5>\n                                </div>\n                                <p class=\"card-text\">\n                                    {item.text}\n                                </p>\n                            </div>\n                        </div>)\n                )}\n                 <div className=\"mx-auto col-md-5 d-flex justify-content-center\">\n                    {this.state.from > 0 && <button className=\"btn btn-primary mx-1\" onClick={this.showRangeList.bind(this,\"prev\")}>Previous</button>}\n                    {this.state.to < this.state.total && <button className=\"btn btn-primary mx-1\" onClick={this.showRangeList.bind(this,\"next\")}>Next</button>}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;\n","import React, {Component} from 'react'\nimport authentication from '../services/authentication';\nimport queryString from 'query-string'\nimport apiService from '../services/api-service';\nimport * as urlConstant from './shared/url-constants';\nimport SnackbarMessage from '../services/snackbar-message';\n\nclass Register extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            user:{\n                name:\"\",\n                email:\"\",\n                password:\"\",\n                instaHandle:\"\",\n                mobile:\"\",\n                token:\"\",\n            },\n            confirm_password:\"\",\n            snackbarProps: { open: false, message: \"Hello World\", variant: \"success\" }\n        }\n    }\n\n    componentDidMount() {\n        const values = queryString.parse(this.props.location.search);\n        if(!values.token && !values.email){\n            window.location.href=\"/login\";\n        }\n        this.setState(prevState=>({user:{...prevState.user,name:values.name,token:values.token,email:values.email}}));\n    }\n\n    verifyPassword=(event)=>{\n        console.log(event);\n    }\n\n    registerUser=()=>{\n        if(this.state.user.password!==this.state.confirm_password){\n            alert(\"password didn't match\");\n        }\n        console.log(this.state.user);\n    }\n\n    setUserData=(key,value)=>{\n        this.setState(prevState=>({user:{...prevState.user,[key]:value}}));\n    }\n\n    registerUser = () =>{\n        if(this.state.user.password!==this.state.confirm_password){\n            this.setState({snackbarProps:{open: true,message: \"password didn't match\", variant: \"error\"}});\n            return;\n        }\n        this.setState({snackbarProps:{open: true,message: \"processing registration request\", variant: \"loading\"}});\n        apiService.postData(urlConstant.USER_REGISTRATION,this.state.user).then(data=>{\n            if(!data.success){\n                this.setState({snackbarProps:{open: true,message: data[\"error\"][\"message\"], variant: \"error\"}});\n            }else{\n                authentication.setUserData(data.data);\n                this.setState({snackbarProps:{open: true,message: \"User registered in successfully\", variant: \"success\"}});\n                setTimeout(()=>{\n                    window.location.href=\"/dashboard\";\n                },1000);\n            }\n        }).catch((error)=>{\n            console.log(error);\n            this.setState({snackbarProps:{open: true,message: \"error while processing request\", variant: \"error\"}});\n        });  \n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                {this.state.snackbarProps.open && <SnackbarMessage onClose={this.handleCloseSnackbar} {...this.state.snackbarProps}></SnackbarMessage>}\n                <div class=\"signup-form row\">\n                    <form onSubmit={(e) => {this.registerUser(); e.preventDefault();}} class=\"col-md-5 col-11 m-auto\">\n                        <h3>Register</h3>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"name\",e.target.value)} value={this.state.user.name} type=\"text\" class=\"form-control\" name=\"name\" placeholder=\"Name\" required=\"required\"/>\n                        </div>\n                        <div class=\"form-group\">\n                            <input disabled value={this.state.user.email} type=\"email\" class=\"form-control\" name=\"email\" placeholder=\"Email\"/>\n                        </div>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"mobile\",e.target.value)} type=\"mobile\" class=\"form-control\" name=\"mobile\" placeholder=\"Mobile number\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"instaHandle\",e.target.value)} type=\"text\" class=\"form-control\" name=\"instaHandle\" placeholder=\"Instagram profile ID\" />\n                        </div>\n                        <div class=\"form-group\">\n                            <input onChange={(e)=>this.setUserData(\"password\",e.target.value)} type=\"password\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required=\"required\"/>\n                        </div>\n                        <div class=\"form-group\">\n                            <input onChange={event=>this.setState({confirm_password:event.target.value})} type=\"password\" class=\"form-control\" name=\"confirm_password\" placeholder=\"Confirm Password\" required=\"required\"/>\n                        </div> \n                        {/* <div class=\"input-group mb-3\">\n                            <input type=\"text\" class=\"form-control\" name=\"otp\" placeholder=\"Otp number\" required=\"required\"/>\n                            <div class=\"input-group-append\">\n                                <button class=\"btn btn-outline-secondary\" type=\"button\">Send OTP</button>\n                            </div>\n                        </div> */}\n        \n                        <div class=\"form-group\">\n                            <button type=\"submit\" class=\"btn btn-success btn-lg btn-block\">Register Now</button>\n                        </div>\n                        <div class=\"text-center\">Already have an account? <a href=\"/login\">Sign in</a></div>\n                    </form>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Register;\n","import Login from './components/login';\nimport React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\nimport './App.css'\n\nimport Header from './components/shared/header'\nimport Authentication from './services/authentication';\nimport Dashboard from './components/user/dashboard';\nimport SubmissionList from './components/user/submission-list';\nimport Home from './components/user/home';\nimport Register from './components/register';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Header/>\n        <Switch>\n          <Route path=\"/login\" render={()=> (Authentication.isAuthenticated()?<Redirect to=\"/dashboard\" />:<Login/>)}/>\n          <Route path=\"/register\" component={Register}/>\n          <Route path=\"/post\"  render={()=> (Authentication.isAuthenticated()?<SubmissionList/>:<Redirect to=\"/login\"/>)}/>\n          <Route path=\"/dashboard\" render={()=> (Authentication.isAuthenticated()?<Dashboard/>:<Redirect to=\"/login\"/>)}/>\n          <Route path=\"/\" render={()=> (Authentication.isAuthenticated()?<Home/>:<Redirect to=\"/login\" />)}/>\n          <Route path=\"*\" render={()=> (Authentication.isAuthenticated()?<Redirect to=\"/\"/>:<Redirect to=\"/login\" />)}/>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}